#ifndef NENGINE_H
#define NENGINE_H

#include "nmsdk.h"
#include "nmsdkdll_loader.h"
#include "UConsoleEngine.h"

namespace NMSDK{

class NEngine: public MySDK::UEngine, public MySDK::UConsoleEngine
{
protected: // Параметры инициализации

protected: // Переменные состояния

protected: // Данные

protected: // Временные переменные

public: // Методы
// --------------------------
// Конструкторы и деструкторы
// --------------------------
NEngine(void);
virtual ~NEngine(void);
// --------------------------

// --------------------------
// Методы доступа к переменным состояния
// --------------------------
// Флаг работы системы
//int IsRunned(void);
// --------------------------

// --------------------------
// Методы доступа к данным
// --------------------------
// Возвращает указатель на среду
NEnvironment* GetEnvironment(void);
// --------------------------

// --------------------------
// Методы управления движком
// Методы пишут в лог по необходимости
// --------------------------
// Инициализирует данные движка
bool Init(void);

// Деинициализирует данные движка
// и сохраняет текущие настройки
bool UnInit(void);

// Запускает систему
bool Start(void);

// Приостанавливает систему
bool Pause(void);

// Останавливает систему
bool Stop(void);
// --------------------------

// --------------------------
// Методы управления средой
// Методы пишут в лог по необходимости
// --------------------------
// Создает модель
bool CreateModel(list<string> &params);

// Выводит список
bool List(list<string> &params);
// --------------------------

// --------------------------
// Методы внутреннего управления движком
// --------------------------
protected:
// Загружает набор библиотек 
//int LoadNLibraries(void);
// --------------------------

// --------------------------
// Методы внутреннего управления консолью
// --------------------------
protected:
// Метод анализирует запрос, вызывает необходимый
// метод выполнения команд и возвращает результат
virtual void Parser(const string &command, list<string> &params);
// --------------------------

// --------------------------
// Скрытые методы управления счетом
// --------------------------
protected:
// Восстановление настроек по умолчанию и сброс процесса счета
virtual bool ADefault(void);

// Обеспечивает сборку внутренней структуры объекта
// после настройки параметров
// Автоматически вызывает метод Reset() и выставляет Ready в true
// в случае успешной сборки
virtual bool ABuild(void);

// Сброс процесса счета.
virtual bool AReset(void);

// Выполняет расчет этого объекта
virtual bool ACalculate(void);
// --------------------------
};


}
#endif
